//  INITIALIZE A NEW REPOSITORY
*******************************************
git init (adds the .git folder in current directory)

//  CLONE A REPO
*******************************************
git clone <ssh key> (clones the whole repo into folder with name of repo)
git clone <ssh key or https> <AliasRepoName for folder>
git clone -b <branchName> --single-branch <ssh key>
git clone -b <branchName> <ssh key> (clones entire repo and checks out  specified branch)

// CHECKOUT (SWITCH TO) A BRANCH
*******************************************
git checkout <branch>
git checkout <branch> -- <directory or file>  (checkout the directory or file from branch or commit)
git checkout -b <branchName> (creates new branch)
git checkout <filename> (hard resets modified unstaged file to HEAD version. Losing any uncommited modifications)
git checkout <commit> (detached HEAD state)
git checkout <commit> <filename> (checks out filename from specific commit, leaving it modified and staged)
git checkout . (checkout current branch files only on current directory and below)
git checkout -b <newBranchName> <fromBranchName> (creates new branch from another)

// MERGE CONFLICT RESOLUTION
*******************************************
git checkout --ours <fileName>
git checkout --theirs <fileName>


// RESET / REVERT
*******************************************

https://opensource.com/article/18/6/git-reset-revert-rebase-commands

(The differences in behavior between 'file level' and 'commit level' uses of checkout/reset)
https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting

git reset . (removes staged files in current directory)
git reset <commitRef> (reset branch tip to commitRef and leave modified files unstaged)
git reset <commitRef> <fileName> (Leaves fileName staged at commitRef version and also modified to its pre-reset state.)
git reset --soft <commitRef> (reset branch tip to commitRef and leave modified files staged)
git reset --hard <commitRef> (reset branch tip to commitRef and reset files to commitRef)
git reset --hard (resets all modified files to their HEAD version)
git reset --hard origin/<branch>  (updates local to origin version of branch)

git revert -no-commit <ref> (reverts the commit and leaves changes staged, not committed)
git revert <ref> (creates a new commit that reverts the changes in ref)
git revert <ref1> <ref2> (reverts ref1 and ref2)
git revert <ref1>..<ref2> (reverts ref1 through ref2)
git revert -m 1 <ref> (reverts a merge commit relative to mainline parent number 1, required for reverting merge commits)

// BRANCH VIEW AND MANIPULAITON
*******************************************
git branch  (displays local branches)
git branch -a (displays all branches including tracked remotes)
git branch -a | grep <name>  (search for branch with <name>)
git branch -m <oldName> <newName> (renames local branch)
git branch -m <newName> (renames current branch)
git branch -d <branchName> (deletes branch)
git branch -D <branchName> (deletes an unmerged branch)

// FETCH / MERGE / PUSH / CHERRY-PICK
*******************************************
git fetch (downloads branches and commits from upstream repo)
git fetch -p (The -p flag means "prune". After fetching, branches which no longer exist on the remote will be deleted.)

git merge (pulls changes from remote repo branch into local branch.)
git merge . <branchName> (merge from local branch)
git merge --squash . <branch> (merge committed changes from local <branch> into another branch without any of <branch> commit log.  Leaves the deltas staged)
git merge <branch> --no-commit (perform merge but stop before making the commit)

git push . <branch_A>:<branch_B> (push to local branch)
git push -d origin <branch> deletes origin branch
git push --force-with-lease <branch> (push amended commit message to remote)
git push origin --delete <branchName> (deletes remote branch)

git cherry-pick <commitID> (merges a specific commit)
git cherry-pick <commitId> --no-commit (perform merge but stop before making the commit)

https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging
git pull <branch> <-Xignore-all-space or -Xignore-space-change> (The first option ignores whitespace completely when comparing lines, the second treats sequences of one or more whitespace characters as equivalent.)

// STAGING FILE CHANGES FOR COMMIT
*******************************************
git add -A (stage all changes, including untracked files)
git add -u (stage all tracked items, ignoring untracked files)

// COMMITING CHANGES
*******************************************
git commit -a (stages and commits all tracked file changes, does not include untracked files)
git commit -m "commit message"
git commit --amend (to amend the last commit message if the commit hasn't yet been pushed)
git commit --allow-empty -m <"Empty-Commit">  (making an empty commit)
git push --force <remoteName (origin)> <branchName> (pushes amended commit message upstream)
git commit --allow-empty -m "Empty-Commit"

CREATE AND ADD A REMOTE REPO
*******************************************
git init --bare <remote repo name>
cd <local repo path>
git remote add <origin(Alias)> <path or URL to remote>
git remote -v (shows origin alias and path)
*** git pull origin master --allow-unrelated-histories  (optional: pull in any items before pushing)
git push -u <origin(Alias)> <branchName> (sets upstream tracking branch and pushes to it)
git branch -a (shows the new remote branch being tracked)
git remote remove <originAlias> (removes remote from local)
git remote prune <originName> (delete references to non-existing remote branches)

// STASHING CHANGES SO YOU CAN CHECKOUT ANOTHER BRANCH WIHTOUT COMMITING THOSE CHANGES
*******************************************
git stash (stashes all tracked file changes)
git stash save <message>  (add a message to the stash event)
git stash -u (include untracked files in the stash)
git stash push <filename> -m <"stash message"> (pushes the modified filename stash onto the stack with a message)
git stash show (shows the changes in the latest stash)
git stash branch <branchName> <stashID> (create a new branch to apply your stashed changes to and then pop your stashed changes onto it)
git stash list (shows stashes)
git stash pop (applies last stash)
git stash drop <stash_id> (remove the specific stash_id from the stash list)
git stash clear (remove all stashed items)
git stash apply stash@{#} (# is a stack number as indicated from 'git stash list')

// GIT STATUS 
*******************************************
git status (shows status of current branch)
git status -uno (only shows modified repo items, not untracked files; means untracked=no)
git status .  (shows only the status of the current directory files)
git status "*textToMatch*" (only shows files with matching text)

// FILE & FOLDER OPERATIONS
*******************************************
git ls-files <*filenames*>  (shows files tracked by git)
git mv <oldFilename> <newFilename> (deletes file and adds file with new name, stages both changes for commit)
git rm <Filename>  (deletes file and stages the removal change for commit)
git rm --cached <filename> (stages a deletion of the file from the repo for commit, while leaving the file undeleted)
git clean -f (remove untracked files)
git clean -fd (remove untracked folders too)

// DIFF FILES AND BRANCHES / SHOW
*******************************************
https://devconnected.com/how-to-compare-two-git-branches/
git diff <branch1>..<branch2> (compare the differences between the two branches.)
git diff <branch1>...<branch2> (compares the top of the right branch (the HEAD) with the common ancestor of the two branches.)
git diff <branch1>...<branch2> -- <filename>  (compares just the file named.  The -- indicates the end of command line flags.)
git diff-tree --no-commit-id --name-only -r <commit> (shows the file paths of all files changed in commit)
git diff --staged <filename> (shows diff for stated files)
git diff --name-status <commit1>..<commit2> (shows the files changed between two commits or branches)
git diff --name-only <A>...<B> (finds the common ancestor of commits A and B and compares the changes from that ancestor to commit B. Showing only file name changes.)

git show <commit>  (shows all changes made in commit, from a diff perspective)
git show <commit> <file> | git apply (applies changes made in file at commit to current)

// LOG / REFLOG
*******************************************
git log --all --decorate --oneline --graph (git ADOG acronym)
git log -<N> (shows last N log entries)
git log -- <file1> <file2> <fileN> (Shows the logs relating to the listed files)
git log --color --graph <branch> -- <filename> (Show logs affecting file from branch) (https://stackoverflow.com/questions/68289950/show-git-log-for-a-file-from-a-specific-branch)
git log -S"String To Search" (searches for commits that have text specified with string)
git log -G"RegularExpression" (searches for commits that have text specified with string)
git log --stat (displays the number of insertions and deletions to each file altered by each commit)
git log --raw -<N>  (show the last N logs, showing the files added to each commit)
git log --oneline <filename> (Shows a oneline log of changes to filename)
git log -p -<N> <commit> <path> (Shows an inline diff from the last N commits from <commit> to <path>)
git shortlog (a shorter display of the log entries)
git reflog (displays the history of HEAD pointer)
git log --no-merges <branch1> ^<branch2> (shows commits specific to branch1 not including branch2, without merge commits, can list multiple branches)
git log --committer="<name>" --no-merges (shows non merge commits by committer)
git log --first-parent (shows only feature branch commits skipping detailed merge commit history)

// BLAME
*******************************************
git blame <filename>
git blame -L <startline>, <endline> (shows who changed what between start and end line)
git blame <filename> | sort | grep <text>  (returns date sorted text modifications found in filename)

// BISECT
*******************************************
https://git-scm.com/docs/git-bisect

// CONFIG
*******************************************
git config --global core.editor nedit
git config --global core.editor "C:\Program Files (x86)\Notepad++\notepad++.exe" -multiInst -notabbar -nosession -noPlugin

// ATTRIBUTES
*******************************************
https://git-scm.com/book/id/v2/Kostumisasi-Git-Git-Attributes
https://git-scm.com/docs/gitattributes

// MISC RESOURCES
*******************************************
https://stackoverflow.com/questions/2304087/what-is-head-in-git
